name: Deploy to AWS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Create deployment package
      run: |
        # Inline deployment script that avoids tar circular reference
        echo "üöÄ Creating deployment package..."
        
        # Create temporary deployment directory
        DEPLOY_DIR="/tmp/deployment-source"
        echo "Creating deployment directory: $DEPLOY_DIR"
        mkdir -p "$DEPLOY_DIR"
        
        # Copy files using rsync with exclusions to avoid permission issues
        echo "Copying files..."
        rsync -av --exclude='.git' \
                 --exclude='node_modules' \
                 --exclude='__pycache__' \
                 --exclude='.env' \
                 --exclude='.DS_Store' \
                 --exclude='output' \
                 --exclude='*.pyc' \
                 --exclude='*.log' \
                 --exclude='*.tmp' \
                 --exclude='*.swp' \
                 --exclude='*.swo' \
                 --exclude='.vscode' \
                 --exclude='.idea' \
                 --exclude='*.tar.gz' \
                 --exclude='deployment-package.tar.gz' \
                 --exclude='aina-server-key.pem' \
                 ./ "$DEPLOY_DIR/" 2>/dev/null || {
            echo "‚ö†Ô∏è  Some files could not be copied due to permissions, continuing..."
        }
        
        # Change to deployment directory
        cd "$DEPLOY_DIR"
        
        # Remove unwanted files and directories
        echo "Cleaning up unwanted files..."
        rm -rf .git node_modules __pycache__ .env .DS_Store output 2>/dev/null || true
        find . -name "*.pyc" -delete 2>/dev/null || true
        find . -name "*.log" -delete 2>/dev/null || true
        
        # Create tar archive in /tmp to avoid circular reference
        echo "Creating deployment package..."
        cd /tmp
        tar -czf "deployment-package.tar.gz" -C "$DEPLOY_DIR" . 2>/dev/null || {
            echo "‚ùå Failed to create deployment package"
            exit 1
        }
        
        # Verify the package was created
        if [ ! -f "deployment-package.tar.gz" ]; then
            echo "‚ùå Error: Deployment package was not created"
            exit 1
        fi
        
        echo "‚úÖ Deployment package created successfully: $(ls -lh deployment-package.tar.gz)"
        
        # Copy to workspace
        cp deployment-package.tar.gz "$GITHUB_WORKSPACE/"
        echo "üì¶ Deployment package copied to $GITHUB_WORKSPACE/"
        
        # Cleanup
        echo "üßπ Cleaning up temporary files..."
        rm -rf "$DEPLOY_DIR"
        rm -f deployment-package.tar.gz
        
        echo "‚úÖ Deployment packaging completed successfully!"
        
    - name: Deploy to AWS
      run: |
        # Your deployment commands here
        echo "Deployment package created successfully"
        ls -la deployment-package.tar.gz
        
        # Example: Deploy to S3 or EC2
        # aws s3 cp deployment-package.tar.gz s3://your-bucket/
        # or
        # aws ec2 create-instance --image-id ami-12345678 --instance-type t2.micro 