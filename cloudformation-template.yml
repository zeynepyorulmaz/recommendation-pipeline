AWSTemplateFormatVersion: '2010-09-09'
Description: 'Fashion Recommendation Pipeline EC2 Instance'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
    Description: EC2 instance type
    ConstraintDescription: must be a valid EC2 instance type.
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the instance will be created
    Default: ''
  
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID where the instance will be created
    Default: ''

Resources:
  # Security Group for the EC2 instance
  FashionPipelineSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Fashion Recommendation Pipeline
      VpcId: !If [HasVpcId, !Ref VpcId, !Ref 'AWS::NoValue']
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
          Description: Application port
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic

  # IAM Role for EC2 instance
  FashionPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: FashionPipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'

  # IAM Instance Profile
  FashionPipelineInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref FashionPipelineRole

  # EC2 Instance
  FashionPipelineInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Ubuntu 22.04 LTS (us-east-1)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref FashionPipelineSecurityGroup
      IamInstanceProfile: !Ref FashionPipelineInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update system
          apt-get update -y
          
          # Install required packages
          apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release software-properties-common
          
          # Install Docker
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update -y
          apt-get install -y docker-ce docker-ce-cli containerd.io
          
          # Add ubuntu user to docker group
          usermod -aG docker ubuntu
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Start and enable Docker
          systemctl start docker
          systemctl enable docker
          
          # Install CloudWatch agent
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
          dpkg -i amazon-cloudwatch-agent.deb
          
          # Create CloudWatch config
          cat > /opt/aws/amazon-cloudwatch-agent/bin/config.json << 'EOF'
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/docker/*.log",
                      "log_group_name": "/aws/ec2/fashion-pipeline/docker",
                      "log_stream_name": "{instance_id}"
                    },
                    {
                      "file_path": "/var/log/syslog",
                      "log_group_name": "/aws/ec2/fashion-pipeline/syslog",
                      "log_stream_name": "{instance_id}"
                    }
                  ]
                }
              }
            }
          }
          EOF
          
          # Start CloudWatch agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
          systemctl start amazon-cloudwatch-agent
          systemctl enable amazon-cloudwatch-agent
          
          # Create application directory
          mkdir -p /home/ubuntu/fashion-pipeline
          chown ubuntu:ubuntu /home/ubuntu/fashion-pipeline
          
          # Create a simple health check script
          cat > /home/ubuntu/health-check.sh << 'EOF'
          #!/bin/bash
          if curl -f http://localhost:5000/health > /dev/null 2>&1; then
            echo "Application is healthy"
            exit 0
          else
            echo "Application is not responding"
            exit 1
          fi
          EOF
          chmod +x /home/ubuntu/health-check.sh
          
          # Setup cron job for health checks
          echo "*/5 * * * * /home/ubuntu/health-check.sh >> /var/log/health-check.log 2>&1" | crontab -
          
          # Create systemd service for auto-restart
          cat > /etc/systemd/system/fashion-pipeline.service << 'EOF'
          [Unit]
          Description=Fashion Pipeline Docker Compose
          Requires=docker.service
          After=docker.service
          
          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory=/home/ubuntu/fashion-pipeline
          ExecStart=/usr/local/bin/docker-compose up -d
          ExecStop=/usr/local/bin/docker-compose down
          User=ubuntu
          Group=ubuntu
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          systemctl daemon-reload
          systemctl enable fashion-pipeline.service
          
          # Create startup script
          cat > /home/ubuntu/start-pipeline.sh << 'EOF'
          #!/bin/bash
          cd /home/ubuntu/fashion-pipeline
          if [ -f docker-compose.yml ]; then
            docker-compose up -d
          else
            echo "Docker Compose file not found. Please upload your project files."
          fi
          EOF
          chmod +x /home/ubuntu/start-pipeline.sh
          
          # Create environment file template
          cat > /home/ubuntu/fashion-pipeline/.env.template << 'EOF'
          GEMINI_API_KEY=your_api_key_here
          EOF
          
          # Set proper permissions
          chown -R ubuntu:ubuntu /home/ubuntu/fashion-pipeline
          
          # Print completion message
          echo "EC2 instance setup completed!"
          echo "Next steps:"
          echo "1. Upload your project files to /home/ubuntu/fashion-pipeline/"
          echo "2. Create .env file with your Gemini API key"
          echo "3. Run: docker-compose up -d"
          
      Tags:
        - Key: Name
          Value: Fashion-Pipeline-Instance
        - Key: Project
          Value: Fashion-Recommendation-Pipeline
        - Key: Environment
          Value: Production

  # Elastic IP for the instance
  FashionPipelineEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref FashionPipelineInstance

Conditions:
  HasVpcId: !Not [!Equals [!Ref VpcId, '']]

Outputs:
  InstanceId:
    Description: Instance ID of the newly created EC2 instance
    Value: !Ref FashionPipelineInstance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"

  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !Ref FashionPipelineEIP
    Export:
      Name: !Sub "${AWS::StackName}-PublicIP"

  PublicDNS:
    Description: Public DNS name of the newly created EC2 instance
    Value: !GetAtt FashionPipelineInstance.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-PublicDNS"

  SecurityGroupId:
    Description: Security Group ID of the newly created EC2 instance
    Value: !Ref FashionPipelineSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroupId"

  ConnectionCommand:
    Description: SSH command to connect to the instance
    Value: !Sub "ssh -i ${KeyPairName}.pem ubuntu@${FashionPipelineEIP}"
    Export:
      Name: !Sub "${AWS::StackName}-ConnectionCommand"

  ApplicationURL:
    Description: URL to access the application
    Value: !Sub "http://${FashionPipelineEIP}:5000"
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationURL" 